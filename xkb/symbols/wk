// Generated by KLFC 1.5.7
// https://github.com/39aldo39/klfc

default
xkb_symbols "basic" {
    key.type[Group1] = "NONE_SHIFT_EXTEND";
    key <TLDE> { [   apostrophe,     quotedbl,    Caps_Lock ],
                 actions[Group1] = [ NoAction(), NoAction(), LockMods(mods=Lock) ] };
    key <AE01> { [            1,       exclam,           F1 ] };
    key <AE02> { [            2,           at,           F2 ] };
    key <AE03> { [            3,   numbersign,           F3 ] };
    key <AE04> { [            4,       dollar,           F4 ] };
    key <AE05> { [            5,      percent,           F5 ] };
    key <AE06> { [            6, dead_diaeresis,           F6 ] };
    key <AE07> { [            7,    ampersand,           F7 ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<FK07>) ] };
    key <AE08> { [            8,     asterisk,           F8 ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<FK08>) ] };
    key <AE09> { [            9,    parenleft,           F9 ] };
    key <AE10> { [            0,   parenright,          F10 ] };
    key <AE11> { [        minus,   underscore,          F11 ] };
    key <AE12> { [        equal,         plus,          F12 ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AD01> { [            q,            Q,       Escape ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<ESC>) ] };
    key <AD02> { [            d,            D,     XF86Back ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I166>) ] };
    key <AD03> { [            r,            R,   XF86Reload ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I181>) ] };
    key <AD04> { [            w,            W,  XF86Forward ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I167>) ] };
    key.type[Group1] = "ALPHABETIC";
    key <AD05> { [            b,            B ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AD06> { [            j,            J,        Prior ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<PGUP>) ] };
    key <AD07> { [            f,            F,         Home ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<HOME>) ] };
    key <AD08> { [            u,            U,           Up ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<UP>) ] };
    key <AD09> { [            p,            P,          End ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<END>) ] };
    key <AD10> { [     ccedilla,     Ccedilla,        Prior ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<PGUP>) ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND";
    key <AD11> { [   dead_acute,   dead_grave,       Escape ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<ESC>) ] };
    key <AD12> { [  bracketleft,    braceleft,       Insert ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<INS>) ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AC01> { [            a,            A,        Alt_L ],
                 actions[Group1] = [ NoAction(), NoAction(), SetMods(mods=Alt) ],
                 vmods=Alt };
    key <AC02> { [            s,            S,      Shift_L ],
                 actions[Group1] = [ NoAction(), NoAction(), SetMods(mods=Shift) ] };
    key <AC03> { [            h,            H,    Control_L ],
                 actions[Group1] = [ NoAction(), NoAction(), SetMods(mods=Control) ] };
    key <AC04> { [            t,            T,   apostrophe ] };
    key.type[Group1] = "ALPHABETIC";
    key <AC05> { [            g,            G ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AC06> { [            y,            Y,         Next ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<PGDN>) ] };
    key <AC07> { [            n,            N,         Left ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<LEFT>) ] };
    key <AC08> { [            e,            E,         Down ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<DOWN>) ] };
    key <AC09> { [            o,            O,        Right ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<RGHT>) ] };
    key <AC10> { [            i,            I,         Next ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<PGDN>) ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND";
    key <AC11> { [   dead_tilde, dead_circumflex,         Menu ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<MENU>) ] };
    key <BKSL> { [ bracketright,   braceright,    XF86Sleep ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<I150>) ] };
    key.type[Group1] = "TWO_LEVEL";
    key <LSGT> { [    backslash,          bar ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AB01> { [            z,            Z,            z ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<AB01>,mods=Control) ] };
    key <AB02> { [            x,            X,            x ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<AB02>,mods=Control) ] };
    key <AB03> { [            m,            M,            c ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<AB03>,mods=Control) ] };
    key <AB04> { [            c,            C,            v ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<AB04>,mods=Control) ] };
    key.type[Group1] = "ALPHABETIC";
    key <AB05> { [            v,            V ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND_ALPHABETIC";
    key <AB06> { [            k,            K,       Return ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<RTRN>) ] };
    key <AB07> { [            l,            L,    BackSpace ] };
    key.type[Group1] = "NONE_SHIFT_EXTEND";
    key <AB08> { [        comma,         less,       Delete ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<DELE>) ] };
    key <AB09> { [       period,      greater,        Print ],
                 actions[Group1] = [ NoAction(), NoAction(), Redirect(key=<PRSC>) ] };
    key.type[Group1] = "TWO_LEVEL";
    key <AB11> { [        slash,     question ] };
    key <AB10> { [    semicolon,        colon ] };
    key.type[Group1] = "NONE_EXTEND";
    key <FK01> { [           F1, XF86AudioPrev ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I173>) ] };
    key <FK02> { [           F2, XF86AudioPlay ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I215>) ] };
    key <FK03> { [           F3, XF86AudioNext ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I171>) ] };
    key <FK04> { [           F4, XF86AudioMute ],
                 actions[Group1] = [ NoAction(), Redirect(key=<MUTE>) ] };
    key <FK05> { [           F5, XF86AudioLowerVolume ],
                 actions[Group1] = [ NoAction(), Redirect(key=<VOL->) ] };
    key <FK06> { [           F6, XF86AudioRaiseVolume ],
                 actions[Group1] = [ NoAction(), Redirect(key=<VOL+>) ] };
    key <FK09> { [           F9, XF86HomePage ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I180>) ] };
    key <FK10> { [          F10, XF86MyComputer ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I165>) ] };
    key <FK11> { [          F11, XF86AudioMedia ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I234>) ] };
    key <FK12> { [          F12, XF86Calculator ],
                 actions[Group1] = [ NoAction(), Redirect(key=<I148>) ] };
    key <BKSP> { [    BackSpace, XF86PowerOff ],
                 actions[Group1] = [ NoAction(), Redirect(key=<POWR>) ] };
    key <SPCE> { [        space,       Return ],
                 actions[Group1] = [ NoAction(), Redirect(key=<RTRN>) ] };
    key.type[Group1] = "ONE_LEVEL";
    key <CAPS> { [ ISO_Level5_Shift ],
                 actions[Group1] = [ SetMods(mods=LevelFive) ],
                 vmods=LevelFive };
    modifier_map Mod3 { ISO_Level5_Shift };
};
