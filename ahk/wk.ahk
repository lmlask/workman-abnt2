; Generated by KLFC 1.5.7
; https://github.com/39aldo39/klfc

#MaxHotkeysPerInterval 200
#MaxThreadsPerHotkey 10

SendUps(ByRef modifiers) {
  for index, modifier in modifiers {
    if (modifier == "Caps")
      SetCapsLockState, off
    else if (modifier == "Num")
      SetNumLockState, off
    else if InStr(modifier, "Extend")
      %modifier% := false
    else
      Send {%modifier% Up}
  }
  modifiers := Object()
}

SendAsUnicode(string) {
  Result := ""
  Loop, Parse, string
    Result .= Format("{{}U+{:04x}{}}", Ord(A_LoopField))
  Send {Blind}%Result%
}

DeadKeys := ComObjCreate("Scripting.Dictionary")

DeadKey(baseChar, table, name := "") {
  Global ActiveDeadKey
  if (ActiveDeadKey != "") {
    NewActiveDeadKey := ComObjCreate("Scripting.Dictionary")
    for key in table {
      value := table.item(key)
      NewActiveDeadKey.item(key) := ActiveDeadKey.item(value)
    }
    result := ActiveDeadKey.item(name)
    if (IsObject(result)) {
      for key in result {
        value := result.item(key)
        NewActiveDeadKey.item(key) := value
      }
    } else if (result != "") {
      ActiveDeadKey := ""
      SendAsUnicode(result)
      Return
    }
    ActiveDeadKey := NewActiveDeadKey
    Return
  }
  ActiveDeadKey := table
  Input key, L1, {Esc}{F1}{F2}{F3}{F4}{F5}{F6}{F7}{F8}{F9}{F10}{F11}{F12}{Left}{Right}{Up}{Down}{Home}{End}{PgUp}{PgDn}{Del}{Ins}{BS}{PrintScreen}{Pause}{AppsKey}
  If InStr(ErrorLevel, "EndKey:") {
    ActiveDeadKey := ""
    value := SubStr(ErrorLevel, 8)
    Send {Blind}{%value%}
    SendAsUnicode(baseChar)
  } else if (ErrorLevel != "NewInput") {
    value := ActiveDeadKey.item(key)
    ActiveDeadKey := ""
    if (IsObject(value)) {
      DeadKey(baseChar, value)
    } else if (value != "") {
      SendAsUnicode(value)
    } else {
      SendAsUnicode(baseChar . key)
    }
  }
}

*SC03a::Extend := true ; QWERTY CapsLock
*SC03a Up::Extend := false
*SC029::Send {Blind}{VKdeSC029 DownR} ; QWERTY ~: '
*SC029 up::Send {Blind}{VKdeSC029 Up}
*SC002::Send {Blind}{VK31SC002 DownR} ; QWERTY 1: 1
*SC002 up::Send {Blind}{VK31SC002 Up}
*SC003::Send {Blind}{VK32SC003 DownR} ; QWERTY 2: 2
*SC003 up::Send {Blind}{VK32SC003 Up}
*SC004::Send {Blind}{VK33SC004 DownR} ; QWERTY 3: 3
*SC004 up::Send {Blind}{VK33SC004 Up}
*SC005::Send {Blind}{VK34SC005 DownR} ; QWERTY 4: 4
*SC005 up::Send {Blind}{VK34SC005 Up}
*SC006::Send {Blind}{VK35SC006 DownR} ; QWERTY 5: 5
*SC006 up::Send {Blind}{VK35SC006 Up}
*SC007::Send {Blind}{VK36SC007 DownR} ; QWERTY 6: 6
*SC007 up::Send {Blind}{VK36SC007 Up}
*SC008::Send {Blind}{VK37SC008 DownR} ; QWERTY 7: 7
*SC008 up::Send {Blind}{VK37SC008 Up}
*SC009::Send {Blind}{VK38SC009 DownR} ; QWERTY 8: 8
*SC009 up::Send {Blind}{VK38SC009 Up}
*SC00a::Send {Blind}{VK39SC00a DownR} ; QWERTY 9: 9
*SC00a up::Send {Blind}{VK39SC00a Up}
*SC00b::Send {Blind}{VK30SC00b DownR} ; QWERTY 0: 0
*SC00b up::Send {Blind}{VK30SC00b Up}
*SC00c::Send {Blind}{VKbdSC00c DownR} ; QWERTY -: -
*SC00c up::Send {Blind}{VKbdSC00c Up}
*SC00d::Send {Blind}{VKbbSC00d DownR} ; QWERTY +: +
*SC00d up::Send {Blind}{VKbbSC00d Up}
*SC010::Send {Blind}{VK51SC010 DownR} ; QWERTY Q: Q
*SC010 up::Send {Blind}{VK51SC010 Up}
*SC011::Send {Blind}{VK44SC011 DownR} ; QWERTY W: D
*SC011 up::Send {Blind}{VK44SC011 Up}
*SC012::Send {Blind}{VK52SC012 DownR} ; QWERTY E: R
*SC012 up::Send {Blind}{VK52SC012 Up}
*SC013::Send {Blind}{VK57SC013 DownR} ; QWERTY R: W
*SC013 up::Send {Blind}{VK57SC013 Up}
*SC014::Send {Blind}{VK42SC014 DownR} ; QWERTY T: B
*SC014 up::Send {Blind}{VK42SC014 Up}
*SC015::Send {Blind}{VK4aSC015 DownR} ; QWERTY Y: J
*SC015 up::Send {Blind}{VK4aSC015 Up}
*SC016::Send {Blind}{VK46SC016 DownR} ; QWERTY U: F
*SC016 up::Send {Blind}{VK46SC016 Up}
*SC017::Send {Blind}{VK55SC017 DownR} ; QWERTY I: U
*SC017 up::Send {Blind}{VK55SC017 Up}
*SC018::Send {Blind}{VK50SC018 DownR} ; QWERTY O: P
*SC018 up::Send {Blind}{VK50SC018 Up}
*SC019::Send {Blind}{VK50SC019 DownR} ; QWERTY P: P
*SC019 up::Send {Blind}{VK50SC019 Up}
*SC01a::Send {Blind}{VKdbSC01a DownR} ; QWERTY [: [
*SC01a up::Send {Blind}{VKdbSC01a Up}
*SC01b::Send {Blind}{VKdbSC01b DownR} ; QWERTY ]: [
*SC01b up::Send {Blind}{VKdbSC01b Up}
*SC01e::Send {Blind}{VK41SC01e DownR} ; QWERTY A: A
*SC01e up::
Send {Blind}{VK41SC01e Up}
SendUps(ModsSC01e)
Return
*SC01f::Send {Blind}{VK53SC01f DownR} ; QWERTY S: S
*SC01f up::
Send {Blind}{VK53SC01f Up}
SendUps(ModsSC01f)
Return
*SC020::Send {Blind}{VK48SC020 DownR} ; QWERTY D: H
*SC020 up::
Send {Blind}{VK48SC020 Up}
SendUps(ModsSC020)
Return
*SC021::Send {Blind}{VK54SC021 DownR} ; QWERTY F: T
*SC021 up::Send {Blind}{VK54SC021 Up}
*SC022::Send {Blind}{VK47SC022 DownR} ; QWERTY G: G
*SC022 up::Send {Blind}{VK47SC022 Up}
*SC023::Send {Blind}{VK59SC023 DownR} ; QWERTY H: Y
*SC023 up::Send {Blind}{VK59SC023 Up}
*SC024::Send {Blind}{VK4eSC024 DownR} ; QWERTY J: N
*SC024 up::Send {Blind}{VK4eSC024 Up}
*SC025::Send {Blind}{VK45SC025 DownR} ; QWERTY K: E
*SC025 up::Send {Blind}{VK45SC025 Up}
*SC026::Send {Blind}{VK4fSC026 DownR} ; QWERTY L: O
*SC026 up::Send {Blind}{VK4fSC026 Up}
*SC027::Send {Blind}{VK49SC027 DownR} ; QWERTY ;: I
*SC027 up::Send {Blind}{VK49SC027 Up}
*SC028::Send {Blind}{VKdeSC028 DownR} ; QWERTY ': '
*SC028 up::Send {Blind}{VKdeSC028 Up}
*SC02b::Send {Blind}{VKddSC02b DownR} ; QWERTY \: ]
*SC02b up::Send {Blind}{VKddSC02b Up}
*SC056::Send {Blind}{VKdcSC056 DownR} ; QWERTY Iso: \
*SC056 up::Send {Blind}{VKdcSC056 Up}
*SC02c::Send {Blind}{VK5aSC02c DownR} ; QWERTY Z: Z
*SC02c up::Send {Blind}{VK5aSC02c Up}
*SC02d::Send {Blind}{VK58SC02d DownR} ; QWERTY X: X
*SC02d up::Send {Blind}{VK58SC02d Up}
*SC02e::Send {Blind}{VK4dSC02e DownR} ; QWERTY C: M
*SC02e up::Send {Blind}{VK4dSC02e Up}
*SC02f::Send {Blind}{VK43SC02f DownR} ; QWERTY V: C
*SC02f up::Send {Blind}{VK43SC02f Up}
*SC030::Send {Blind}{VK56SC030 DownR} ; QWERTY B: V
*SC030 up::Send {Blind}{VK56SC030 Up}
*SC031::Send {Blind}{VK4bSC031 DownR} ; QWERTY N: K
*SC031 up::Send {Blind}{VK4bSC031 Up}
*SC032::Send {Blind}{VK4cSC032 DownR} ; QWERTY M: L
*SC032 up::Send {Blind}{VK4cSC032 Up}
*SC033::Send {Blind}{VKbcSC033 DownR} ; QWERTY ,: ,
*SC033 up::Send {Blind}{VKbcSC033 Up}
*SC034::Send {Blind}{VKbeSC034 DownR} ; QWERTY .: .
*SC034 up::Send {Blind}{VKbeSC034 Up}
*SC059::Send {Blind}{VKbfSC059 DownR} ; QWERTY Ro: /
*SC059 up::Send {Blind}{VKbfSC059 Up}
*SC035::Send {Blind}{VKbaSC035 DownR} ; QWERTY /: ;
*SC035 up::Send {Blind}{VKbaSC035 Up}
*SC03b::Send {Blind}{VK70SC03b DownR} ; QWERTY F1: F1
*SC03b up::Send {Blind}{VK70SC03b Up}
*SC03c::Send {Blind}{VK71SC03c DownR} ; QWERTY F2: F2
*SC03c up::Send {Blind}{VK71SC03c Up}
*SC03d::Send {Blind}{VK72SC03d DownR} ; QWERTY F3: F3
*SC03d up::Send {Blind}{VK72SC03d Up}
*SC03e::Send {Blind}{VK73SC03e DownR} ; QWERTY F4: F4
*SC03e up::Send {Blind}{VK73SC03e Up}
*SC03f::Send {Blind}{VK74SC03f DownR} ; QWERTY F5: F5
*SC03f up::Send {Blind}{VK74SC03f Up}
*SC040::Send {Blind}{VK75SC040 DownR} ; QWERTY F6: F6
*SC040 up::Send {Blind}{VK75SC040 Up}
*SC043::Send {Blind}{VK78SC043 DownR} ; QWERTY F9: F9
*SC043 up::Send {Blind}{VK78SC043 Up}
*SC044::Send {Blind}{VK79SC044 DownR} ; QWERTY F10: F10
*SC044 up::Send {Blind}{VK79SC044 Up}
*SC057::Send {Blind}{VK7aSC057 DownR} ; QWERTY F11: F11
*SC057 up::Send {Blind}{VK7aSC057 Up}
*SC058::Send {Blind}{VK7bSC058 DownR} ; QWERTY F12: F12
*SC058 up::Send {Blind}{VK7bSC058 Up}
*SC00e::Send {Blind}{VK8SC00e DownR} ; QWERTY Backspace: Backspace
*SC00e up::Send {Blind}{VK8SC00e Up}
*SC039::Send {Blind}{VK20SC039 DownR} ; QWERTY Space: Space
*SC039 up::Send {Blind}{VK20SC039 Up}

; QWERTY ~
#if not Extend
SC029::Send {Blind}{U+0027} ; '
+SC029::Send {Blind}{U+0022} ; "
#if Extend
*SC029::Send {Blind}{CapsLock}

; QWERTY 1
#if not Extend
SC002::Send {Blind}{U+0031} ; 1
+SC002::Send {Blind}{U+0021} ; !
#if Extend
*SC002::Send {Blind}{F1}

; QWERTY 2
#if not Extend
SC003::Send {Blind}{U+0032} ; 2
+SC003::Send {Blind}{U+0040} ; @
#if Extend
*SC003::Send {Blind}{F2}

; QWERTY 3
#if not Extend
SC004::Send {Blind}{U+0033} ; 3
+SC004::Send {Blind}{U+0023} ; #
#if Extend
*SC004::Send {Blind}{F3}

; QWERTY 4
#if not Extend
SC005::Send {Blind}{U+0034} ; 4
+SC005::Send {Blind}{U+0024} ; $
#if Extend
*SC005::Send {Blind}{F4}

; QWERTY 5
#if not Extend
SC006::Send {Blind}{U+0035} ; 5
+SC006::Send {Blind}{U+0025} ; %
#if Extend
*SC006::Send {Blind}{F5}

; QWERTY 6
#if not Extend
SC007::Send {Blind}{U+0036} ; 6
+SC007::
; diaeresis
if (DeadKeys.item("diaeresis") == "") {
  DeadKeys.item("diaeresis") := ComObjCreate("Scripting.Dictionary")
  DeadKeys.item("diaeresis").item(" ") := """"
  DeadKeys.item("diaeresis").item("A") := "Ä"
  DeadKeys.item("diaeresis").item("a") := "ä"
  DeadKeys.item("diaeresis").item("E") := "Ë"
  DeadKeys.item("diaeresis").item("e") := "ë"
  DeadKeys.item("diaeresis").item("H") := "Ḧ"
  DeadKeys.item("diaeresis").item("h") := "ḧ"
  DeadKeys.item("diaeresis").item("I") := "Ï"
  DeadKeys.item("diaeresis").item("i") := "ï"
  DeadKeys.item("diaeresis").item("O") := "Ö"
  DeadKeys.item("diaeresis").item("o") := "ö"
  DeadKeys.item("diaeresis").item("t") := "ẗ"
  DeadKeys.item("diaeresis").item("U") := "Ü"
  DeadKeys.item("diaeresis").item("u") := "ü"
  DeadKeys.item("diaeresis").item("W") := "Ẅ"
  DeadKeys.item("diaeresis").item("w") := "ẅ"
  DeadKeys.item("diaeresis").item("X") := "Ẍ"
  DeadKeys.item("diaeresis").item("x") := "ẍ"
  DeadKeys.item("diaeresis").item("Y") := "Ÿ"
  DeadKeys.item("diaeresis").item("y") := "ÿ"
}
DeadKey("¨", DeadKeys.item("diaeresis"), "diaeresis")
Return
#if Extend
*SC007::Send {Blind}{F6}

; QWERTY 7
#if not Extend
SC008::Send {Blind}{U+0037} ; 7
+SC008::Send {Blind}{U+0026} ; &
#if Extend
*SC008::Send {Blind}{F7}

; QWERTY 8
#if not Extend
SC009::Send {Blind}{U+0038} ; 8
+SC009::Send {Blind}{U+002a} ; *
#if Extend
*SC009::Send {Blind}{F8}

; QWERTY 9
#if not Extend
SC00a::Send {Blind}{U+0039} ; 9
+SC00a::Send {Blind}{U+0028} ; (
#if Extend
*SC00a::Send {Blind}{F9}

; QWERTY 0
#if not Extend
SC00b::Send {Blind}{U+0030} ; 0
+SC00b::Send {Blind}{U+0029} ; )
#if Extend
*SC00b::Send {Blind}{F10}

; QWERTY -
#if not Extend
SC00c::Send {Blind}{U+002d} ; -
+SC00c::Send {Blind}{U+005f} ; _
#if Extend
*SC00c::Send {Blind}{F11}

; QWERTY +
#if not Extend
SC00d::Send {Blind}{U+003d} ; =
+SC00d::Send {Blind}{U+002b} ; +
#if Extend
*SC00d::Send {Blind}{F12}

; QWERTY Q
#if not Extend
SC010::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0071} ; q
} else {
  Send {Blind}{U+0051} ; Q
}
Return
+SC010::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0051} ; Q
} else {
  Send {Blind}{U+0071} ; q
}
Return
#if Extend
*SC010::Send {Blind}{Esc}

; QWERTY W
#if not Extend
SC011::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0064} ; d
} else {
  Send {Blind}{U+0044} ; D
}
Return
+SC011::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0044} ; D
} else {
  Send {Blind}{U+0064} ; d
}
Return
#if Extend
*SC011::Send {Blind}{Browser_Back}

; QWERTY E
#if not Extend
SC012::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0072} ; r
} else {
  Send {Blind}{U+0052} ; R
}
Return
+SC012::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0052} ; R
} else {
  Send {Blind}{U+0072} ; r
}
Return
#if Extend
*SC012::Send {Blind}{Browser_Refresh}

; QWERTY R
#if not Extend
SC013::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0077} ; w
} else {
  Send {Blind}{U+0057} ; W
}
Return
+SC013::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0057} ; W
} else {
  Send {Blind}{U+0077} ; w
}
Return
#if Extend
*SC013::Send {Blind}{Browser_Forward}

; QWERTY T
#if
SC014::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0062} ; b
} else {
  Send {Blind}{U+0042} ; B
}
Return
+SC014::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0042} ; B
} else {
  Send {Blind}{U+0062} ; b
}
Return

; QWERTY Y
#if not Extend
SC015::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006a} ; j
} else {
  Send {Blind}{U+004a} ; J
}
Return
+SC015::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004a} ; J
} else {
  Send {Blind}{U+006a} ; j
}
Return
#if Extend
*SC015::Send {Blind}{PgUp}

; QWERTY U
#if not Extend
SC016::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0066} ; f
} else {
  Send {Blind}{U+0046} ; F
}
Return
+SC016::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0046} ; F
} else {
  Send {Blind}{U+0066} ; f
}
Return
#if Extend
*SC016::Send {Blind}{Home}

; QWERTY I
#if not Extend
SC017::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0075} ; u
} else {
  Send {Blind}{U+0055} ; U
}
Return
+SC017::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0055} ; U
} else {
  Send {Blind}{U+0075} ; u
}
Return
#if Extend
*SC017::Send {Blind}{Up}

; QWERTY O
#if not Extend
SC018::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0070} ; p
} else {
  Send {Blind}{U+0050} ; P
}
Return
+SC018::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0050} ; P
} else {
  Send {Blind}{U+0070} ; p
}
Return
#if Extend
*SC018::Send {Blind}{End}

; QWERTY P
#if not Extend
SC019::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+00e7} ; ç
} else {
  Send {Blind}{U+00c7} ; Ç
}
Return
+SC019::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+00c7} ; Ç
} else {
  Send {Blind}{U+00e7} ; ç
}
Return
#if Extend
*SC019::Send {Blind}{PgUp}

; QWERTY [
#if not Extend
SC01a::
; acute
if (DeadKeys.item("acute") == "") {
  DeadKeys.item("acute") := ComObjCreate("Scripting.Dictionary")
  DeadKeys.item("acute").item(" ") := "'"
  DeadKeys.item("acute").item("A") := "Á"
  DeadKeys.item("acute").item("a") := "á"
  DeadKeys.item("acute").item("Æ") := "Ǽ"
  DeadKeys.item("acute").item("æ") := "ǽ"
  DeadKeys.item("acute").item("C") := "Ć"
  DeadKeys.item("acute").item("c") := "ć"
  DeadKeys.item("acute").item("E") := "É"
  DeadKeys.item("acute").item("e") := "é"
  DeadKeys.item("acute").item("G") := "Ǵ"
  DeadKeys.item("acute").item("g") := "ǵ"
  DeadKeys.item("acute").item("I") := "Í"
  DeadKeys.item("acute").item("i") := "í"
  DeadKeys.item("acute").item("K") := "Ḱ"
  DeadKeys.item("acute").item("k") := "ḱ"
  DeadKeys.item("acute").item("L") := "Ĺ"
  DeadKeys.item("acute").item("l") := "ĺ"
  DeadKeys.item("acute").item("M") := "Ḿ"
  DeadKeys.item("acute").item("m") := "ḿ"
  DeadKeys.item("acute").item("N") := "Ń"
  DeadKeys.item("acute").item("n") := "ń"
  DeadKeys.item("acute").item("O") := "Ó"
  DeadKeys.item("acute").item("o") := "ó"
  DeadKeys.item("acute").item("Ø") := "Ǿ"
  DeadKeys.item("acute").item("ø") := "ǿ"
  DeadKeys.item("acute").item("P") := "Ṕ"
  DeadKeys.item("acute").item("p") := "ṕ"
  DeadKeys.item("acute").item("R") := "Ŕ"
  DeadKeys.item("acute").item("r") := "ŕ"
  DeadKeys.item("acute").item("S") := "Ś"
  DeadKeys.item("acute").item("s") := "ś"
  DeadKeys.item("acute").item("U") := "Ú"
  DeadKeys.item("acute").item("u") := "ú"
  DeadKeys.item("acute").item("W") := "Ẃ"
  DeadKeys.item("acute").item("w") := "ẃ"
  DeadKeys.item("acute").item("Y") := "Ý"
  DeadKeys.item("acute").item("y") := "ý"
  DeadKeys.item("acute").item("Z") := "Ź"
  DeadKeys.item("acute").item("z") := "ź"
}
DeadKey("´", DeadKeys.item("acute"), "acute")
Return
+SC01a::
; grave
if (DeadKeys.item("grave") == "") {
  DeadKeys.item("grave") := ComObjCreate("Scripting.Dictionary")
  DeadKeys.item("grave").item(" ") := "``"
  DeadKeys.item("grave").item("A") := "À"
  DeadKeys.item("grave").item("a") := "à"
  DeadKeys.item("grave").item("E") := "È"
  DeadKeys.item("grave").item("e") := "è"
  DeadKeys.item("grave").item("I") := "Ì"
  DeadKeys.item("grave").item("i") := "ì"
  DeadKeys.item("grave").item("N") := "Ǹ"
  DeadKeys.item("grave").item("n") := "ǹ"
  DeadKeys.item("grave").item("O") := "Ò"
  DeadKeys.item("grave").item("o") := "ò"
  DeadKeys.item("grave").item("U") := "Ù"
  DeadKeys.item("grave").item("u") := "ù"
  DeadKeys.item("grave").item("W") := "Ẁ"
  DeadKeys.item("grave").item("w") := "ẁ"
  DeadKeys.item("grave").item("Y") := "Ỳ"
  DeadKeys.item("grave").item("y") := "ỳ"
}
DeadKey("``", DeadKeys.item("grave"), "grave")
Return
#if Extend
*SC01a::Send {Blind}{Esc}

; QWERTY ]
#if not Extend
SC01b::Send {Blind}{U+005b} ; [
+SC01b::Send {Blind}{U+007b} ; {
#if Extend
*SC01b::Send {Blind}{Ins}

; QWERTY A
#if not Extend
SC01e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0061} ; a
} else {
  Send {Blind}{U+0041} ; A
}
Return
+SC01e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0041} ; A
} else {
  Send {Blind}{U+0061} ; a
}
Return
#if Extend
*SC01e::
Send {Blind}{Alt Down}
if (ModsSC01e == "")
  ModsSC01e := Object()
ModsSC01e.Insert("Alt")
Return

; QWERTY S
#if not Extend
SC01f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0073} ; s
} else {
  Send {Blind}{U+0053} ; S
}
Return
+SC01f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0053} ; S
} else {
  Send {Blind}{U+0073} ; s
}
Return
#if Extend
*SC01f::
Send {Blind}{Shift Down}
if (ModsSC01f == "")
  ModsSC01f := Object()
ModsSC01f.Insert("Shift")
Return

; QWERTY D
#if not Extend
SC020::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0068} ; h
} else {
  Send {Blind}{U+0048} ; H
}
Return
+SC020::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0048} ; H
} else {
  Send {Blind}{U+0068} ; h
}
Return
#if Extend
*SC020::
Send {Blind}{Ctrl Down}
if (ModsSC020 == "")
  ModsSC020 := Object()
ModsSC020.Insert("Ctrl")
Return

; QWERTY F
#if not Extend
SC021::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0074} ; t
} else {
  Send {Blind}{U+0054} ; T
}
Return
+SC021::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0054} ; T
} else {
  Send {Blind}{U+0074} ; t
}
Return
#if Extend
*SC021::Send {Blind}{U+0027} ; '

; QWERTY G
#if
SC022::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0067} ; g
} else {
  Send {Blind}{U+0047} ; G
}
Return
+SC022::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0047} ; G
} else {
  Send {Blind}{U+0067} ; g
}
Return

; QWERTY H
#if not Extend
SC023::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0079} ; y
} else {
  Send {Blind}{U+0059} ; Y
}
Return
+SC023::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0059} ; Y
} else {
  Send {Blind}{U+0079} ; y
}
Return
#if Extend
*SC023::Send {Blind}{PgDn}

; QWERTY J
#if not Extend
SC024::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006e} ; n
} else {
  Send {Blind}{U+004e} ; N
}
Return
+SC024::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004e} ; N
} else {
  Send {Blind}{U+006e} ; n
}
Return
#if Extend
*SC024::Send {Blind}{Left}

; QWERTY K
#if not Extend
SC025::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0065} ; e
} else {
  Send {Blind}{U+0045} ; E
}
Return
+SC025::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0045} ; E
} else {
  Send {Blind}{U+0065} ; e
}
Return
#if Extend
*SC025::Send {Blind}{Down}

; QWERTY L
#if not Extend
SC026::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006f} ; o
} else {
  Send {Blind}{U+004f} ; O
}
Return
+SC026::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004f} ; O
} else {
  Send {Blind}{U+006f} ; o
}
Return
#if Extend
*SC026::Send {Blind}{Right}

; QWERTY ;
#if not Extend
SC027::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0069} ; i
} else {
  Send {Blind}{U+0049} ; I
}
Return
+SC027::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0049} ; I
} else {
  Send {Blind}{U+0069} ; i
}
Return
#if Extend
*SC027::Send {Blind}{PgDn}

; QWERTY '
#if not Extend
SC028::
; tilde
if (DeadKeys.item("tilde") == "") {
  DeadKeys.item("tilde") := ComObjCreate("Scripting.Dictionary")
  DeadKeys.item("tilde").item("A") := "Ã"
  DeadKeys.item("tilde").item("a") := "ã"
  DeadKeys.item("tilde").item("E") := "Ẽ"
  DeadKeys.item("tilde").item("e") := "ẽ"
  DeadKeys.item("tilde").item("I") := "Ĩ"
  DeadKeys.item("tilde").item("i") := "ĩ"
  DeadKeys.item("tilde").item("N") := "Ñ"
  DeadKeys.item("tilde").item("n") := "ñ"
  DeadKeys.item("tilde").item("O") := "Õ"
  DeadKeys.item("tilde").item("o") := "õ"
  DeadKeys.item("tilde").item("U") := "Ũ"
  DeadKeys.item("tilde").item("u") := "ũ"
  DeadKeys.item("tilde").item("V") := "Ṽ"
  DeadKeys.item("tilde").item("v") := "ṽ"
  DeadKeys.item("tilde").item("Y") := "Ỹ"
  DeadKeys.item("tilde").item("y") := "ỹ"
}
DeadKey("~", DeadKeys.item("tilde"), "tilde")
Return
+SC028::
; circumflex
if (DeadKeys.item("circumflex") == "") {
  DeadKeys.item("circumflex") := ComObjCreate("Scripting.Dictionary")
  DeadKeys.item("circumflex").item(" ") := "^"
  DeadKeys.item("circumflex").item("A") := "Â"
  DeadKeys.item("circumflex").item("a") := "â"
  DeadKeys.item("circumflex").item("C") := "Ĉ"
  DeadKeys.item("circumflex").item("c") := "ĉ"
  DeadKeys.item("circumflex").item("E") := "Ê"
  DeadKeys.item("circumflex").item("e") := "ê"
  DeadKeys.item("circumflex").item("G") := "Ĝ"
  DeadKeys.item("circumflex").item("g") := "ĝ"
  DeadKeys.item("circumflex").item("H") := "Ĥ"
  DeadKeys.item("circumflex").item("h") := "ĥ"
  DeadKeys.item("circumflex").item("I") := "Î"
  DeadKeys.item("circumflex").item("i") := "î"
  DeadKeys.item("circumflex").item("J") := "Ĵ"
  DeadKeys.item("circumflex").item("j") := "ĵ"
  DeadKeys.item("circumflex").item("O") := "Ô"
  DeadKeys.item("circumflex").item("o") := "ô"
  DeadKeys.item("circumflex").item("S") := "Ŝ"
  DeadKeys.item("circumflex").item("s") := "ŝ"
  DeadKeys.item("circumflex").item("U") := "Û"
  DeadKeys.item("circumflex").item("u") := "û"
  DeadKeys.item("circumflex").item("W") := "Ŵ"
  DeadKeys.item("circumflex").item("w") := "ŵ"
  DeadKeys.item("circumflex").item("Y") := "Ŷ"
  DeadKeys.item("circumflex").item("y") := "ŷ"
  DeadKeys.item("circumflex").item("Z") := "Ẑ"
  DeadKeys.item("circumflex").item("z") := "ẑ"
}
DeadKey("^", DeadKeys.item("circumflex"), "circumflex")
Return
#if Extend
*SC028::Send {Blind}{AppsKey}

; QWERTY \
#if not Extend
SC02b::Send {Blind}{U+005d} ; ]
+SC02b::Send {Blind}{U+007d} ; }
#if Extend
*SC02b::Send {Blind}{Sleep}

; QWERTY Iso
#if
SC056::Send {Blind}{U+005c} ; \
+SC056::Send {Blind}{U+007c} ; |

; QWERTY Z
#if not Extend
SC02c::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+007a} ; z
} else {
  Send {Blind}{U+005a} ; Z
}
Return
+SC02c::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+005a} ; Z
} else {
  Send {Blind}{U+007a} ; z
}
Return
#if Extend
*SC02c::Send {Blind}^{VK5aSC02c}

; QWERTY X
#if not Extend
SC02d::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0078} ; x
} else {
  Send {Blind}{U+0058} ; X
}
Return
+SC02d::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0058} ; X
} else {
  Send {Blind}{U+0078} ; x
}
Return
#if Extend
*SC02d::Send {Blind}^{VK58SC02d}

; QWERTY C
#if not Extend
SC02e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006d} ; m
} else {
  Send {Blind}{U+004d} ; M
}
Return
+SC02e::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004d} ; M
} else {
  Send {Blind}{U+006d} ; m
}
Return
#if Extend
*SC02e::Send {Blind}^{VK43SC02e}

; QWERTY V
#if not Extend
SC02f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0063} ; c
} else {
  Send {Blind}{U+0043} ; C
}
Return
+SC02f::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0043} ; C
} else {
  Send {Blind}{U+0063} ; c
}
Return
#if Extend
*SC02f::Send {Blind}^{VK56SC02f}

; QWERTY B
#if
SC030::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0076} ; v
} else {
  Send {Blind}{U+0056} ; V
}
Return
+SC030::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+0056} ; V
} else {
  Send {Blind}{U+0076} ; v
}
Return

; QWERTY N
#if not Extend
SC031::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006b} ; k
} else {
  Send {Blind}{U+004b} ; K
}
Return
+SC031::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004b} ; K
} else {
  Send {Blind}{U+006b} ; k
}
Return
#if Extend
*SC031::Send {Blind}{Enter}

; QWERTY M
#if not Extend
SC032::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+006c} ; l
} else {
  Send {Blind}{U+004c} ; L
}
Return
+SC032::
if not GetKeyState("CapsLock", "T") {
  Send {Blind}{U+004c} ; L
} else {
  Send {Blind}{U+006c} ; l
}
Return
#if Extend
*SC032::Send {Blind}{BackSpace}

; QWERTY ,
#if not Extend
SC033::Send {Blind}{U+002c} ; ,
+SC033::Send {Blind}{U+003c} ; <
#if Extend
*SC033::Send {Blind}{Del}

; QWERTY .
#if not Extend
SC034::Send {Blind}{U+002e} ; .
+SC034::Send {Blind}{U+003e} ; >
#if Extend
*SC034::Send {Blind}{PrintScreen}

; QWERTY Ro
#if
SC059::Send {Blind}{U+002f} ; /
+SC059::Send {Blind}{U+003f} ; ?

; QWERTY /
#if
SC035::Send {Blind}{U+003b} ; ;
+SC035::Send {Blind}{U+003a} ; :

; QWERTY F1
#if Extend
*SC03b::Send {Blind}{Media_Prev}

; QWERTY F2
#if Extend
*SC03c::Send {Blind}{Media_Play_Pause}

; QWERTY F3
#if Extend
*SC03d::Send {Blind}{Media_Next}

; QWERTY F4
#if Extend
*SC03e::Send {Blind}{Volume_Mute}

; QWERTY F5
#if Extend
*SC03f::Send {Blind}{Volume_Down}

; QWERTY F6
#if Extend
*SC040::Send {Blind}{Volume_Up}

; QWERTY F9
#if Extend
*SC043::Send {Blind}{Browser_Home}

; QWERTY F10
#if Extend
*SC044::Send {Blind}{Launch_App1}

; QWERTY F11
#if Extend
*SC057::Send {Blind}{Launch_Media}

; QWERTY F12
#if Extend
*SC058::Send {Blind}{Launch_App2}

; QWERTY Backspace
#if Extend
*SC00e::Send {Blind}{Power}

; QWERTY Space
#if Extend
*SC039::Send {Blind}{Enter}
